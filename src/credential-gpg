#!/bin/bash
set -eu -o pipefail

# @getoptions
VERSION="0.1"
ACTIONS="get store erase"

parser_definition() {
  setup   REST help:usage \
    -- "Usage: ${0##*/} [OPTIONS] ACTION" ''
  msg -- 'Actions:'
  msg -- "  $ACTIONS"
  msg -- ""
  msg -- 'Options:'
  flag    TRY_FIFO    --try-fifo \
    -- "takes no arguments"
  param   PPP      -p --ppp \
    -- "takes one argument"
  option  OOO      -o --ooo on:"default" \
    -- "takes one optional argument"
  param   FILE        --file \
    -- "use FILE to lookup and store credentials"
  param   GPG         --gpg \
    -- "GPG program instead of \"gpg\""
  param   RECP     -r --recipeint \
    -- "GPG program instead of \"gpg\""
  flag    VERBOSE  -v --verbose
  disp    :usage   -h --help
  disp    VERSION     --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# @end
eval "$(getoptions parser_definition) exit 1"

info() {
  if [[ -n "$VERBOSE" ]]; then
    printf >&2 '%s\n' "$@"
  fi
}

infof() {
  if [[ -n "$VERBOSE" ]]; then
    printf >&2 "$@"
  fi
}

 try_fifo() {
  local tmpdir="${CREDENTIAL_GPG_TMPDIR-"${TMPDIR-/tmp}"}"

  fifo="$(mktemp --dry-run --tmpdir="$tmpdir" tmp.XXXXXXXXXX.fifo)"
  trap cleanup EXIT
  mkfifo -- "$fifo"

  read -p "nan de mo doo zo: " REPLY

  cat >&2 -- "$fifo" &
  #cat >&2 <"$fifo" &
  sleep 0.1
  {
    printf "%s\n" "(pop first) PWD: $PWD"
    printf "%s\n" "(pop fitst) REPLY: $REPLY"
  } >"$fifo"

  {
    printf "%s\n" "(put first) PWD: $PWD"
    printf "%s\n" "(put fitst) REPLY: $REPLY"
  } >"$fifo"
  sleep 0.1
  cat >&2 -- "$fifo"

  return 0
}

cleanup() {
  if [[ -n "$VERBOSE" ]]; then
    rm -vf -- "$fifo"
  else
    rm -f -- "$fifo"
  fi
}

get() {
  local file="$tmpdir/git-credentials"
  local enc="$HOME/.gitcredentials.gpg"
  if [[ ! -e "$enc" && -e "${XDG_CONFIG_HOME:-.config}/git/credentials.gpg" ]]; then
    enc="${XDG_CONFIG_HOME:-.config}/git/credentials.gpg"
  fi

  decrypt

  git-credential-store --file "$file" get

  #rm

  return 0
}

decrypt() {
  printf "%s\n" "FILE: $FILE" "GPG: $GPG" "RECP: $RECP"

  #cd "$tmpdir" || exit 1

  if [[ -n "$RECP" ]]; then
    "$GPG" -r "$RECP" -o "$file" --decrypt "enc"
  else
    "$GPG" -o "$file" --decrypt "$enc"
  fi
}

store() {
  local file="$tmpdir/git-credentials"
  local enc="$HOME/.gitcredentials.gpg"
  if [[ ! -e "$enc" && -e "${XDG_CONFIG_HOME:-.config}/git/credentials.gpg" ]]; then
    enc="${XDG_CONFIG_HOME:-.config}/git/credentials.gpg"
  fi

  git-credential-store --file "$file" store

  encrypt

  #rm

  return 0
}

erase() {
  info "Not implemented yet"

  return 1
}

encrypt() {
  info "Not implemented yet"

  return 1
}

#info "TRY_FIFO: $TRY_FIFO, PPP: $PPP, OOO: $OOO"
if [ "$#" -eq 0 ]; then
  if [[ -n "$TRY_FIFO" ]]; then
    try_fifo
  else
    usage >&2
    exit 1
  fi
else
  case $1 in
  get|store|erase)
    tmpdir="${CREDENTIAL_GPG_TMPDIR-"${TMPDIR-/tmp}"}"
    GPG="${GPG:-gpg}"
    $1
    ;;
  *)
    printf "%s\n" "Actions is one of ${ACTIONS// /,}" >&2
    exit 1
    ;;
  esac
fi
